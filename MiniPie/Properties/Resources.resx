<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About_BasedOn" xml:space="preserve">
    <value>Based on</value>
  </data>
  <data name="About_Version" xml:space="preserve">
    <value>Version:</value>
  </data>
  <data name="About_UsedThirdParty" xml:space="preserve">
    <value>Used 3rd party libraries</value>
  </data>
  <data name="Settings_AlwaysOnTop" xml:space="preserve">
    <value>Show MiniPie always on top of other windows</value>
  </data>
  <data name="Settings_StartWithWindows" xml:space="preserve">
    <value>Start MiniPie after I log into my computer</value>
  </data>
  <data name="Settings_HideIfSpotifyClosed" xml:space="preserve">
    <value>Hide MiniPie when Spotify is not running</value>
  </data>
  <data name="Settings_DisableAnimations" xml:space="preserve">
    <value>Disable animations (if your pc can't handle the awesomeness)</value>
  </data>
  <data name="Settings_ApplicationSize" xml:space="preserve">
    <value>Application size:</value>
  </data>
  <data name="Settings_CacheClearLabel" xml:space="preserve">
    <value>MiniPie caches all requested cover images to save your bandwidth. If you have troubles with some images you can use the button below to clear the cache.</value>
  </data>
  <data name="Settings_CurrenCacheSize" xml:space="preserve">
    <value>Current cache size:</value>
  </data>
  <data name="Settings_ClearCache" xml:space="preserve">
    <value>Clear cover cache</value>
  </data>
  <data name="Settings_EnableHotkeys" xml:space="preserve">
    <value>Enable Hotkeys</value>
  </data>
  <data name="App_Previous" xml:space="preserve">
    <value>Previous Track</value>
  </data>
  <data name="App_Next" xml:space="preserve">
    <value>Next Track</value>
  </data>
  <data name="App_VolumeDown" xml:space="preserve">
    <value>Volume Down</value>
  </data>
  <data name="App_VolumeUp" xml:space="preserve">
    <value>Volume Up</value>
  </data>
  <data name="App_AboutMiniPie" xml:space="preserve">
    <value>About MiniPie...</value>
  </data>
  <data name="App_Settings" xml:space="preserve">
    <value>Settings...</value>
  </data>
  <data name="App_PlayPause" xml:space="preserve">
    <value>Play/Pause</value>
  </data>
  <data name="App_Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="Enum_ApplicationSize_Large" xml:space="preserve">
    <value>Large</value>
  </data>
  <data name="Enum_ApplicationSize_Medium" xml:space="preserve">
    <value>Medium</value>
  </data>
  <data name="Enum_ApplicationSize_Small" xml:space="preserve">
    <value>Small</value>
  </data>
  <data name="Settings_Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="Settings_Common" xml:space="preserve">
    <value>Common</value>
  </data>
  <data name="Settings_Hotkeys" xml:space="preserve">
    <value>Hotkeys</value>
  </data>
  <data name="Enum_SupportedKeyModifiers_Alt" xml:space="preserve">
    <value>Alt</value>
  </data>
  <data name="Enum_SupportedKeyModifiers_Ctrl" xml:space="preserve">
    <value>Ctrl</value>
  </data>
  <data name="Enum_SupportedKeyModifiers_Shift" xml:space="preserve">
    <value>Shift</value>
  </data>
  <data name="Enum_SupportedKeyModifiers_None" xml:space="preserve">
    <value>(None)</value>
  </data>
  <data name="Settings_InvalidHotkeys" xml:space="preserve">
    <value>Invalid hotkey selected. Make sure that hotkeys are different.</value>
  </data>
  <data name="Settings_StartMinimized" xml:space="preserve">
    <value>Start MiniPie minimized</value>
  </data>
  <data name="App_MinimizeToTray" xml:space="preserve">
    <value>Minimize to tray</value>
  </data>
  <data name="App_CopySpotifyLink" xml:space="preserve">
    <value>Copy Spotify Url</value>
  </data>
  <data name="App_CopyTrack" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="App_CopyTrackName" xml:space="preserve">
    <value>Copy Track Name</value>
  </data>
  <data name="Settings_Authorize" xml:space="preserve">
    <value>Authorize</value>
  </data>
  <data name="Settings_LoggedIn" xml:space="preserve">
    <value>User Logged In</value>
  </data>
  <data name="Settings_Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="Settings_NotLoggedIn" xml:space="preserve">
    <value>User Not Logged In</value>
  </data>
  <data name="Settings_RetrievingLoginStatus" xml:space="preserve">
    <value>Verifying Login Status...</value>
  </data>
  <data name="Settings_Logout" xml:space="preserve">
    <value>Logout</value>
  </data>
  <data name="App_AddToPlaylist" xml:space="preserve">
    <value>Add To Playlist</value>
  </data>
  <data name="Settings_LockScreenBehavior" xml:space="preserve">
    <value>Lock screen behavior</value>
  </data>
  <data name="Enum_LockScreenBehavior_Disabled" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Enum_LockScreenBehavior_Pause" xml:space="preserve">
    <value>Pause when locked</value>
  </data>
  <data name="Enum_LockScreenBehavior_PauseUnpause" xml:space="preserve">
    <value>Pause when locked. Unpause when unlocked if paused by locking</value>
  </data>
  <data name="Enum_LockScreenBehavior_PauseUnpauseAlways" xml:space="preserve">
    <value>Pause when locked. Always unpause when unlocked</value>
  </data>
  <data name="App_WaitingForSpotify" xml:space="preserve">
    <value>Waiting for spotify app</value>
  </data>
  <data name="Enum_UpdatePreference_Developer" xml:space="preserve">
    <value>Pre-release</value>
  </data>
  <data name="Enum_UpdatePreference_Stable" xml:space="preserve">
    <value>Stable</value>
  </data>
  <data name="Settings_ReleaseChannel" xml:space="preserve">
    <value>Update channel:</value>
  </data>
  <data name="Settings_SingleClickHide" xml:space="preserve">
    <value>Hide window by single click on track icon (not double click)</value>
  </data>
</root>